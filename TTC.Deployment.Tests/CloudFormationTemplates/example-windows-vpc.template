{
    "AWSTemplateFormatVersion": "2010-09-09",
    "Description": "AWS.Deployment.Tests VPC (Please Delete Me)",
    "Parameters": {
    },
    "Resources": {
        "instanceProfile1": {
            "Type": "AWS::IAM::InstanceProfile",
            "Properties": {
                "Path": "/",
                "Roles": [ "DeployableInstanceRole" ]
            }
        },
		"CodeDeployPolicy" : {
			"Type" : "AWS::IAM::Policy",
			"Properties" : {
				"PolicyName" : "CodeDeployPolicy",
				"PolicyDocument" : {
					"Version" : "2012-10-17",
					"Statement" : [{
							"Action" : [
								"s3:GetObject",
								"s3:GetObjectVersion",
								"s3:ListObjects"
							],
							"Effect" : "Allow",
							"Resource" : "*"
						}
					]
				},
				"Roles" : [{
						"Ref" : "DeployableInstanceRole"
					}
				]
			}
		},
		"DeployableInstanceRole" : {
			"Type" : "AWS::IAM::Role",
			"Properties" : {
				"AssumeRolePolicyDocument" : {
					"Version" : "2012-10-17",
					"Statement" : [{
							"Effect" : "Allow",
							"Principal" : {
								"Service" : ["ec2.amazonaws.com"]
							},
							"Action" : ["sts:AssumeRole"]
						}
					]
				},
				"Path" : "/"
			}
		},
        "vpc1": {
            "Type": "AWS::EC2::VPC",
            "Properties": {
                "CidrBlock": "10.0.0.0/16",
                "InstanceTenancy": "default",
                "EnableDnsSupport": "true",
                "EnableDnsHostnames": "true",
                "Tags": [
                    { "Key": "Name", "Value": "TTC.Deployment.Tests VPC" }
                ]
            }
        },
        "publicSubnet1": {
            "Type": "AWS::EC2::Subnet",
            "Properties": {
                "CidrBlock": "10.0.0.0/24",
                "AvailabilityZone": "us-west-2a",
                "VpcId": { "Ref": "vpc1" },
                "Tags": [
                    { "Key": "Name", "Value": "PublicSubnet" }
                ]
            }
        },
        "internetGateway1": {
            "Type": "AWS::EC2::InternetGateway",
            "Properties": { }
        },
        "dhcpOptions1": {
            "Type": "AWS::EC2::DHCPOptions",
            "Properties": {
                "DomainName": "ec2.internal",
                "DomainNameServers": [ "AmazonProvidedDNS" ]
            }
        },
        "networkAcl1": {
            "Type": "AWS::EC2::NetworkAcl",
            "Properties": {
                "VpcId": { "Ref": "vpc1" }
            }
        },
        "routeTable1": {
            "Type": "AWS::EC2::RouteTable",
            "Properties": {
                "VpcId": { "Ref": "vpc1" }
            }
        },
        "routeTable2": {
            "Type": "AWS::EC2::RouteTable",
            "Properties": {
                "VpcId": { "Ref": "vpc1" }
            }
        },
        "webServer": {
            "Type": "AWS::EC2::Instance",
            "Metadata": { },
			"CreationPolicy" : {
				"ResourceSignal" : {
					"Count" : "1",
					"Timeout" : "PT35M"
				}
			},
            "Properties": {
                "IamInstanceProfile": { "Ref": "instanceProfile1" },
                "UserData": {
                    "Fn::Base64": {
                        "Fn::Join": [
                            "",
                            [
                                "<script>\n",
                                "powershell.exe add-windowsfeature web-webserver -includeallsubfeature -logpath $env:temp\\webserver_addrole.log \n",
                                "powershell.exe add-windowsfeature web-mgmt-tools -includeallsubfeature -logpath $env:temp\\mgmttools_addrole.log \n",
                                "powershell.exe New-Item -Path c:\\temp -ItemType \"directory\" -Force \n",
                                "powershell.exe Read-S3Object -BucketName aws-codedeploy-us-west-2/latest -Key codedeploy-agent.msi -File c:\\temp\\codedeploy-agent.msi \n",
                                "powershell.exe Start-Process -Wait -FilePath c:\\temp\\codedeploy-agent.msi -WindowStyle Hidden \n",
                                "cfn-signal -e %ERRORLEVEL%",
								"    --stack=", {
									"Ref" : "AWS::StackName"
								},
								"    --resource=webServer",
								"    --region=", {
									"Ref" : "AWS::Region"
								},
                                "\n",
                                "</script>\n"
                            ]
                        ]
                    }
                },

                "DisableApiTermination": "false",
                "InstanceInitiatedShutdownBehavior": "stop",
                "ImageId": "ami-83a5bce2",
                "InstanceType": "t2.nano",
                "KeyName": "WindowsTestKey",
                "Monitoring": "false",
                "Tags": [
                            {
                                "Key": "DeploymentRole",
                                "Value": {"Fn::Join": 
                                    [
                                        "",
                                        [
                                            { "Ref": "AWS::StackName" },
                                            "_",
                                            "WebLayer"
                                        ]

                                    ]
                                }
                            }
                ],
                "NetworkInterfaces": [
                    {
						"AssociatePublicIpAddress": true,
                        "DeleteOnTermination": "true",
                        "Description": "Primary network interface",
                        "DeviceIndex": 0,
                        "SubnetId": {
                            "Ref": "publicSubnet1"
                        },
                        "PrivateIpAddresses": [
                            {
                                "PrivateIpAddress": "10.0.0.219",
                                "Primary": "true"
                            }
                        ],
                        "GroupSet": [
                            {
                                "Ref": "securityGroup1"
                            }
                        ]
                    }
                ]
            }
        },

        "internalApiServer": {
            "Type": "AWS::EC2::Instance",
            "Metadata": {

            },
			"CreationPolicy" : {
				"ResourceSignal" : {
					"Count" : "1",
					"Timeout" : "PT35M"
				}
			},
            "Properties": {
                "IamInstanceProfile": { "Ref": "instanceProfile1" },
                "UserData": {
                    "Fn::Base64": {
                        "Fn::Join": [
                            "",
                            [
                                "<script>\n",
                                "powershell.exe add-windowsfeature web-webserver -includeallsubfeature -logpath $env:temp\\webserver_addrole.log \n",
                                "powershell.exe add-windowsfeature web-mgmt-tools -includeallsubfeature -logpath $env:temp\\mgmttools_addrole.log \n",
                                "powershell.exe New-Item -Path c:\\temp -ItemType \"directory\" -Force \n",
                                "powershell.exe Read-S3Object -BucketName aws-codedeploy-us-west-2/latest -Key codedeploy-agent.msi -File c:\\temp\\codedeploy-agent.msi \n",
                                "powershell.exe Start-Process -Wait -FilePath c:\\temp\\codedeploy-agent.msi -WindowStyle Hidden \n",
                                "cfn-signal -e %ERRORLEVEL%",
								"    --stack=", {
									"Ref" : "AWS::StackName"
								},
								"    --resource=internalApiServer",
								"    --region=", {
									"Ref" : "AWS::Region"
								},
                                "</script>\n"
                            ]
                        ]
                    }
                },

                "DisableApiTermination": "false",
                "InstanceInitiatedShutdownBehavior": "stop",
                "ImageId": "ami-83a5bce2",
                "InstanceType": "t2.nano",
                "KeyName": "WindowsTestKey",
                "Monitoring": "false",
                "Tags": [
                            {
                                "Key": "DeploymentRole",
                                "Value": {"Fn::Join": 
                                    [
                                        "",
                                        [
                                            { "Ref": "AWS::StackName" },
                                            "_",
                                            "ApiLayer"
                                        ]

                                    ]
                                }
                            }
                ],
                "NetworkInterfaces": [
                    {
                        "AssociatePublicIpAddress": true,
                        "DeleteOnTermination": "true",
                        "Description": "Primary network interface",
                        "DeviceIndex": 0,
                        "SubnetId": {
                            "Ref": "publicSubnet1"
                        },
                        "PrivateIpAddresses": [
                            {
                                "PrivateIpAddress": "10.0.0.220",
                                "Primary": "true"
                            }
                        ],
                        "GroupSet": [
                            {
                                "Ref": "securityGroup1"
                            }
                        ]
                    }
                ]
            }
        },

        "securityGroup1": {
            "Type": "AWS::EC2::SecurityGroup",
            "Properties": {
                "GroupDescription": "Security Group",
                "VpcId": {
                    "Ref": "vpc1"
                },
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": "TemplatePublicSecurityGroup"
                    }
                ]
            }
        },
        "acl1": {
            "Type": "AWS::EC2::NetworkAclEntry",
            "Properties": {
                "CidrBlock": "0.0.0.0/0",
                "Egress": "true",
                "Protocol": "-1",
                "RuleAction": "allow",
                "RuleNumber": "100",
                "NetworkAclId": {
                    "Ref": "networkAcl1"
                }
            }
        },
        "acl2": {
            "Type": "AWS::EC2::NetworkAclEntry",
            "Properties": {
                "CidrBlock": "0.0.0.0/0",
                "Protocol": "-1",
                "RuleAction": "allow",
                "RuleNumber": "100",
                "NetworkAclId": {
                    "Ref": "networkAcl1"
                }
            }
        },
        "subnetacl1": {
            "Type": "AWS::EC2::SubnetNetworkAclAssociation",
            "Properties": {
                "NetworkAclId": {
                    "Ref": "networkAcl1"
                },
                "SubnetId": {
                    "Ref": "publicSubnet1"
                }
            }
        },
        "gatewayAttachment1": {
            "Type": "AWS::EC2::VPCGatewayAttachment",
            "Properties": {
                "VpcId": {
                    "Ref": "vpc1"
                },
                "InternetGatewayId": {
                    "Ref": "internetGateway1"
                }
            }
        },
        "subnetroute2": {
            "Type": "AWS::EC2::SubnetRouteTableAssociation",
            "Properties": {
                "RouteTableId": {
                    "Ref": "routeTable2"
                },
                "SubnetId": {
                    "Ref": "publicSubnet1"
                }
            }
        },
        "route1": {
            "Type": "AWS::EC2::Route",
            "Properties": {
                "DestinationCidrBlock": "0.0.0.0/0",
                "RouteTableId": {
                    "Ref": "routeTable1"
                },
                "GatewayId": {
                    "Ref": "internetGateway1"
                }
            },
            "DependsOn": "gatewayAttachment1"
        },
        "route2": {
            "Type": "AWS::EC2::Route",
            "Properties": {
                "DestinationCidrBlock": "0.0.0.0/0",
                "RouteTableId": {
                    "Ref": "routeTable2"
                },
                "GatewayId": {
                    "Ref": "internetGateway1"
                }
            },
            "DependsOn": "gatewayAttachment1"
        },
        "vpcDhcpOptionsAssociation1": {
            "Type": "AWS::EC2::VPCDHCPOptionsAssociation",
            "Properties": {
                "VpcId": {
                    "Ref": "vpc1"
                },
                "DhcpOptionsId": {
                    "Ref": "dhcpOptions1"
                }
            }
        },
        "ingress1": {
            "Type": "AWS::EC2::SecurityGroupIngress",
            "Properties": {
                "GroupId": {
                    "Ref": "securityGroup1"
                },
                "IpProtocol": "tcp",
                "FromPort": "80",
                "ToPort": "80",
                "CidrIp": "0.0.0.0/0"
            }
        },
        "ingress2": {
            "Type": "AWS::EC2::SecurityGroupIngress",
            "Properties": {
                "GroupId": {
                    "Ref": "securityGroup1"
                },
                "IpProtocol": "tcp",
                "FromPort": "443",
                "ToPort": "443",
                "CidrIp": "0.0.0.0/0"
            }
        },
        "ingress3": {
            "Type": "AWS::EC2::SecurityGroupIngress",
            "Properties": {
                "GroupId": {
                    "Ref": "securityGroup1"
                },
                "IpProtocol": "icmp",
                "FromPort": "-1",
                "ToPort": "-1",
                "CidrIp": "10.0.1.0/24"
            }
        },
        "egress1": {
            "Type": "AWS::EC2::SecurityGroupEgress",
            "Properties": {
                "GroupId": {
                    "Ref": "securityGroup1"
                },
                "IpProtocol": "-1",
                "CidrIp": "0.0.0.0/0"
            }
        },
        "egress2": {
            "Type": "AWS::EC2::SecurityGroupEgress",
            "Properties": {
                "GroupId": {
                    "Ref": "securityGroup1"
                },
                "IpProtocol": "tcp",
                "FromPort": "80",
                "ToPort": "80",
                "CidrIp": "0.0.0.0/0"
            }
        }
    },
	"Outputs" : {
		"publicDnsName" : {
			"Value" : { "Fn::GetAtt" : [ "webServer" , "PublicDnsName" ] },
			"Description" : "The public DNS name"
		}
	}
}
